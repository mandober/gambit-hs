module Parsers.Parsec_02 where
{-
Monadic Parser Combinators

http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf


3.1 The parser monad
====================
Monadic nature of combinator parsers.

We have defined these 2 functions on parsers:

result :: a -> Parser a
bind :: Parser a -> (a -> Parser b) -> Parser b

Generalizing this specific Parser ctor to any type constructor, `M`, reveals the signature of monads: a monad is a type constructor M together with `bind` and `result` (or `return`) fns defined on the implementing type. `result` just lifts a value into monadic context, and bind is for sequancing operations.

result :: a -> M a
bind :: M a -> (a -> M b) -> M b

Thus, parsers form a monad for which M is the Parser type constructor, and `result` and `bind` are methods on the type as defined previously.

Readers familiar with the categorical definition of a monad may have expected the operations `map` and `join` in place of the single `bind` operation:
    map :: (a -> b) -> (M a -> M b)     -- ?!
    join :: M (M a) -> M a              -- ?!

...however, both definitions are equivalent, only ours has the advantage that `bind` proves more convenient for monadic programming than `map` and `join`.

A class for monads can be declared in Gofer by:
    class Monad m where
        result :: a -> m a
        bind :: m a -> (a -> m b) -> m b

This declaration can be read as: a type ctor `m` is a member of the class Monad if it is equipped with `result` and `bind` operations of the specified types.

The fact that `m` must be a type constructor (rather than just a type) is inferred from its use in the types for the operations.

Now the type constructor Parser can be made into an instance of the class Monad using the result and bind from the previous section:

instance Monad Parser where
    result v   = \inp -> [(v,inp)]
    p `bind` f = \inp -> concat [f v out | (v,out) <- p inp]


NOTES: type synonyms such as our `Parser` must be supplied with all their arguments. Hence the instance declaration above is not actually valid Gofer code, since `Parser` is used in the first line without an argument. The problem is easy to solve (redefine `Parser` using `data` rather than `type`, or as a restricted type synonym), but for simplicity we prefer in this article just to assume that type synonyms can be partially applied. The second point is that the syntax of Gofer does not currently allow the types of the defined functions in instance declarations to be explicitly specified, so consult the fns sig.

---

We now examine these operations on parsers:

zero :: Parser a
plus :: Parser a -> Parser a -> Parser a

Generalising again, we arrive at the notion of a MONAD WITH A ZERO AND A PLUS, which can be encapsulated using the Gofer class in the following manner:

class Monad m => Monad0Plus m where
    zero :: m a
    (++) :: m a -> m a -> m a



-}
import Data.Char

type Parser a = String -> [(a,String)]


result :: a -> Parser a
result v = \inp -> [(v,inp)]

zero :: Parser a
zero = \inp -> []

item :: Parser Char
item [] = []
item (x:xs) = [(x,xs)]


-- bind :: (Monad f) => f a -> (a -> f b) -> f b
bind :: Parser a -> (a -> Parser b) -> Parser b
p `bind` f = \inp -> concat [f v inp' | (v,inp') <- p inp]

-- instance Monad Parser where
    -- (>>=) = bind
    -- return = result

-- satisfy :: Stream s m Char => (Char -> Bool) -> ParsecT s u m Char
sat :: (Char -> Bool) -> Parser Char
sat p = item `bind` (\x -> if p x then result x else zero)


char :: Char -> Parser Char
char x = sat (\y -> x == y)

digit :: Parser Char
digit = sat (\x -> isDigit x)

lower :: Parser Char
lower = sat (\x -> isLower x)

upper :: Parser Char
upper = sat (\x -> isUpper x)

-- Testing char parsers
_ = upper "P"       -- [('P',"")]
_ = upper "Poo"     -- [('P',"oo")]
_ = upper "pee"     -- []
_ = lower "pee"     -- [('p',"ee")]
_ = digit "66pee"   -- [('6',"6pee")]

-- example parser that eats exactly 2 lower-case chars
twoLowerChars :: Parser [Char]
twoLowerChars =
    lower `bind` \x ->
        lower `bind` \y ->
            result [x,y]

-- Testing char pair parser
_ = twoLowerChars "abcd"       --- [("ab","cd")]
_ = twoLowerChars "aBcd"       --- []


plus :: Parser a -> Parser a -> Parser a
p `plus` q = \inp -> (p inp ++ q inp)

letter :: Parser Char
letter = lower `plus` upper

alphanum :: Parser Char
alphanum = letter `plus` digit

word :: Parser String
word = neWord `plus` result "" where
    neWord = letter `bind` \x  ->
             word   `bind` \xs ->
             result (x:xs)
